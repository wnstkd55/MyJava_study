package Chap18.EX01;

//1. 자바는 객체지향프로그램(OOP) : 모든 함수(메소드)는 객체 내부에 존재해야 된다. 함수는 클래스, 인터페이스 내부
//    람다식 : 자바에서 함수형 프로그래밍이 가능하도록 지원해주는 하나의 기능.
//		- 기존의 구현된 메소드를 재정하는것이 아니라 구현부가 없는 메소드에 람다식으로 기능을 부여해서 작동시키는 문법
//		- 람다식은 가능한한 축약된 문법을 사용. (생략 가능한 것을 최대한 생략해서 표현) - 문법이 굉장히 간결하다.
//		- 람다식은 자바에서 내부적으로 익명 클래스로 변환되어 처리됨.
//		- 람다식은 함수형 인터페이스에서 익명클래스로 변환이 가능
//		- 람다식은 함수형 인터페이스의 구현된 익명클래스를 람다식으로 축약.
//		- 함수형 인터페이스 : 인터페이스에 단 한개의 추상메소드가 정의된 인터페이스를 함수형 인터페이스라고 한다.
//		- 자바는 새로운 함수 문법을 정의한것이 아니라 이미 존재하는 인터페이스를 빌려서 람다식 표현

@FunctionalInterface //  @ : 어노테이션,		@FunctionalInterface : 함수형인터페이스를 선언, (추상메소드가 1개)
interface A{ 		// <===함수형 인터페이스
	
	void abc();		//public abstract 생략되어 있다.
	//void bcd();	//메소드 1개여야 한다.

}

//인터페이스의 정의된 메소드를 구현하는 방법 1. : 인터페이스의 메소드를 구현하는 클래스를 생성.
class B1 implements A{
	@Override 		// 부모의 클래스나 변수 등의 이름을 확인해주는 Annotation
	public void abc() {
		System.out.println("메소드 내용 1");
	}
}

public class OOP_VS_FP {

	public static void main(String[] args) {
		//자바는 객체지향 프로그램이므로 모든 함수(메소드)는 클래스 내부에 있고 객체 생성후 호출
		//1. 객체지향 프로그래밍 문법	
		//(1) class를 생성해서 사용 : 모든 메소드는 객체 내부에 존재하며 객체를 생성후 호출이 가능
		A A = new B1();
		A.abc();
		
		//(2) 익명 이너클래스를 생성해서 사용
		//인터페이스의 추상메소드를 직접 구현한 클래스를 생성하지 않고 익명 이너클래스를 사용해서 메소드 호출
		A a2 = new A() {
			@Override
			public void abc() {
				System.out.println("메소드 내용 2");
				
			}
		};
		a2.abc(); 	//oop는 객체 생성후 메소드 호출
		
		//(3) 람다식(함수적) 프로그래밍 문법(람다식)
		
		A a3 = () -> {System.out.println("메소드 내용 3");}; 		//<== 람다식 표현 ((public void 메소드명) 생략)
																// 람다식에 사용되는 인터페이스는 함수형 인터페이스여야 한다.
		a3.abc();
		
		
	}

}

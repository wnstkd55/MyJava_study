package Chap10.EX04;

class Animal3 {		//부모 클래스, 모든클래스는 Object클래스를 상속한다.
	String name;	
	int age;
	
	void cry() {
		System.out.println("동물은 웁니다.");
	}

	@Override	//Object.toString 메소드는 객체 자체를 출력할때 호출이 된다.
	public String toString() {		//객체의 주소를 출력한다. [패키지명. 클래스명@객체의 메모리의 해쉬코드]
		
		return "이름은 : "+ name+ " ,나이는: " + age+ " 입니다." ;
		
	}	
}

class Tiger3 extends Animal3{
	
	Tiger3(){}	//기본 생성자 : 변수의 초기화값을 할당하지 않고 초기화.
				//다른생성자가 객체내에 존재할 경우 기본 생성자를 외부에서 호출시 생략되어 있으면 안된다.
	
	Tiger3(String a, int b){		//생성자 : 객체를 생성할때 메모리의 초기값을 할당할때 사용.
		super.name=a;		//super : 부모클래스(super)의 메모리를 뜻함, this : 자기자신의 객체
		super.age=b;
		
	}

	@Override
	void cry() {
		
		super.cry();		//super키워드는 부모클래스, super : 상속관계일때 부모클래스
							//this키워드는 자기 자신의 객체
		
		System.out.println("호랑이는 어흥하고 웁니다.");
		
	} 
}

class Cat3 extends Animal3{
	
	Cat3(){	}	//기본생성자
	
	Cat3(String a, int b){	//생성자
		super.name=a;
		super.age=b;
	}
	
	@Override
	void cry() {
		super.cry();
		System.out.println("고양이는 야옹하고 웁니다.");
	}
	
	
}

class Dog3 extends Animal3{
	
	Dog3(){}	//기본생성자
	
	Dog3(String a, int b){		//생성자
		super.name = a;
		super.age = b;
	}
	
	
	@Override
	void cry() {
		super.cry();
		System.out.println("개는 멍멍하고 웁니다.");
	}
	
}

public class Test02 {

	public static void main(String[] args) {
		
		Animal3 a3 = new Animal3();		//a3객체 생성
		
		System.out.println(a3);	//객체 자체를 출력할 경우, Object클래스의 toString메소드 호출
					//Object.toString() : 객체의 메모리주소의 해쉬코드를 출력
					//Chap10.EX04.Animal3@1c4af82c <==패키지명.객체명@해쉬코드
		System.out.println(a3.toString());
		
		//객체 자체를 출력하면 객체의 Object클래스의 toString메소드를 호출
		
		Animal3 t3 = new Tiger3();	//Tiger3를 Animal3로 업캐스팅
		Animal3 c3 = new Cat3();	//Cat3를 Animal3로 업캐스팅
		Animal3 d3 = new Dog3();	//Dog3를 Animal3로 업캐스팅
		
		t3.cry();	//부모의 cry()를 호출할 경우 오버라이딩된 Tiger3의 cry()호출
		c3.cry(); 	//Animal3.cry를 호출 ===>오버라이딩된 cat3의 cry()호출
		d3.cry();
		
		System.out.println("==================");
		
		Animal3[] arr = {t3,c3,d3};
		for (int i = 0; i < arr.length; i++) {
			arr[i].cry();
		}
		
		System.out.println("===================");
		for(Animal3 k : arr) {
			k.cry();
		}
		
		System.out.println("===================");
		
		Animal3 aa3 = new Tiger3("호랑이",5);		//
		Animal3 cc3 = new Cat3("고양이",3);
		Animal3 dd3 = new Dog3("개",10);
		
		System.out.println(aa3);		//객체 자체를 출력시, 기본적으로는 객체의 메모리 해쉬코드가 출력
										//Object의 toString()메소드를 재정의
		System.out.println(cc3);
		System.out.println(dd3);
		System.out.println("========for==============");
		Animal3[] arr2 = {aa3,cc3,dd3};
		
		for (int i = 0; i < arr2.length; i++) {
			System.out.println(arr2[i]);
		}
		System.out.println("=======enhanced for=========");
		for(Animal3 k : arr2) {
			System.out.println(k);
		}

	}				

}
